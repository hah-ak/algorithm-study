알고리즘 성능의 기준
    정확성, 작업량, 메모리 사용량, 단순성, 최적성
        1. 알고리즘의 시간복잡도를 계산 할 때, for 문이 들어간경우
            for 에서 숫자를 뽑아낼 때 한번
            for 문이후 각 계산 과정에서 한번씩 추가되어
            2줄의 포문의 경우 2n의 과정을 거치는 형식이된다.

Python이란?
 인터프리터 언어
    프로그래밍 언어를 바로 실행한다. 기계여로 바꾸는 컴파일러와 비교 될 수있다.
    고급언어(흔히쓰는 프로그래밍언어들)를 한번에 한 줄씩 읽어들인다.
    컴파일러에 비해 느릴 수도 있으나, 번역과 실행이 동시에 일어나서 코드가 커지면 더 빠를 수 있다.
    실행파일을 따로 만들지 않기에 더 빠를 수 있는 것.
 객체지향 

 객체 vs 변수 vs 인스턴스
    객체 : 만들어진 실제 대상, 각각이 메모리를 가지고있다.
    인스턴스 : 객체가 어떤 다른 대상과의 관계가 있을 때, 주로 사용한다.
                -주로 어떤것에 의해 파생되어 생성됬음을 알릴 때 사용.
    변수 : 객체가 자리 잡은 곳, 객체의 주소 값이 저장된 곳, 파이썬에서는 모든 자료는 객체다.
                - 객체의 형태에 따라 변수의 형태가 결정된다.(java와 차이)
클래스변수 , 인스턴스 변수

시퀀스 자료형
    순서가 존재하는 자료형, 인덱싱과 슬라이싱이 가능한 자료형을 말한다.
비트연산자
    >>,<<(피연산자의 비트열을 이동시킨다.비트연산자 시프트) ,&,|
    시프트 예시) 1 << 5라 하면 이진수 1을 왼쪽으로 5칸 옮긴 100000가 된다. 
                만약 3 << 5라 하면 이진수 11을 5칸 옮기므로 1100000가 된다.
list 용어
    순회 : 2차원 리스트 전체를 보는 것.
        행우선순회,열우선순회,지그재그순회
    델타를 이용한 탐색
        한 좌표의 상하좌우 4방향 조회
        델타 값은 한 좌표와 상하좌우의 값의 차이로 만들어진 리스트
    전치행렬
        행과열을 뒤바꾼 행렬
        *zip이용해 쉽게 만들 수 있음
String
    글자 자체를 저장하는 건 메모리 낭비가 크므로
    코드체계로 저장한다. -> 아스키코드
    영어가 아닌 다국어를 표현하기 위해 만든 코드 -> 유니코드
    유니코드는 저장하는 변수의 크기가 달라 인코딩이 필요하다.
    파이썬에서 문자열은 시퀀스 형태이다.
    튜플로 인식한다.
선형구조
    1:1의 자료구조
비선형구조
    자료간의 관계가 1:N의 관계
stack
        쌓아 올린구조
        선형구조
        후입선출(LIFO)
        리스트를 저장소로 사용할 수 있으며, 때로는 이 자체가 좁은 의미의 스택이된다.
        공백 스택(리스트를 사용하면 리스트)의 탑위치의 원소는 -1번에 위치한다.
        즉, 공백 자료의 인댁스는 -1이 존재.
        공백에서 -1외의 경우에는 스택언더플로우 문제가 생긴다.
        push(삽입)과 pop(선택 후 제거)가 있다.
        정해진 크기이상 push할 경우 stack overflow
        리스트를 사용하면 크기가 변경될 때 overhead에 의해 많은시간 소요
        그래서 크기를 미리정하거나, 동적리스트를 이용하여 저장소 동적할당이 필요
    stack의 함수호출관리
        1 후입선출구조로 관리
        2 함수 호출 발생시, 함수 수행에 필요한 지역변수, 매개변수, 복귀주소등의 정보를
        스택 프레임에 저장하여 시스템스택에 삽입
        3 실행이 끝나면 시스템 스택의 top원소(스택프레임)을 삭제하며 복귀주소로 복귀
        4 위 과정을 반복하며 마치며, 최종적으로 시스템 스택은 공백이 된다
        (함수를 호출하고 내부의 다른 함수를 호출 하여 시스템스택에 시스템프레임이 쌓이고 복귀할 때, 하나씩
        복귀하여 그때 해당 함수는 사라지며(pop에의해 필요정보는 이동), 탑은 복귀한 위치의 함수만을 가르키며
        사라질때 복귀전 함수에 의해 만들어진 정보는 무효화 된다.)
        재귀호출이 이러한 방식
    memoization
        - 알고리즘 용어
    DynamicProgramming
        - 알고리즘 용어
    DFS(깊이 우선 탐색)
        - 알고리즘 용어
        

underflow
    메모리가 표현할 수 있는 것보다 작은 것을 표현하는 경우
overflow 
    메모리가 표현할 수 있는 것보다 큰 것을 표현하는 경우

후위표기법
    - 주로 컴퓨터가 연산할 때 쓰임, 연산자를 피연산자 뒤에 표기
중위표기법
    - 일반적인 연산표기법
토큰
    - 수식에서 의미있는 최소 단위

백트래킹
    - 해를 하는 중 막힐 경우 다시 돌아가는 기법
    - 최적화 문제와 결정문제를 해결할 수 있다.

Queue
    스택과 비슷하게 삽입,삭제위치가 제한적
    뒤에서 삽입 앞에서 삭제만 한다(선입선출)
    enqueue,dequeque
    front,rear가 같다 == 큐가 비어있다
    선형,원형는 리스트 사용
        - 선형 큐
            초기상태 : front = rear = -1
            공백상태 : fron = rear
            포화상태 : rear = n - 1
            qpeek = 큐의 가장앞을 찾는 것으로 front + 1
            리스트의 고정을 해야 하므로 미리 큐를 확보해야 하므로
            메모리 낭비가 생길 수 있고,
            삽입삭제가 계속되면 앞에 자리가 있어도 포화가 될 수 있다.
            대신 삽입 삭제의 처리 속도는 빠르다.
            선형큐의 단점을 보완할 수있는 것이 원형큐와 파이썬의 리스트, 큐라이브러리 등이 있음
        - 원형 큐
            초기상태 : front = rear = 0
            공백상태와 포화상태 구분을 위해 front 자리는 빈자리로 놔둠
            큐의 시작과 끝을 연결하기 위해 삽입,삭제 위치는 (front,rear +1) % n
        - 파이썬 리스트를 사용한 큐
            메모리는 절약하나 속도는 느릴 수 있다.
            front는 리스트의 맨앞 -1
            rear는 len(queue) - 1 이 된다.
    연결큐 연결리스트
        - 연결 큐
            큐의 원소 : 단순 연결 리스트의 노드
            순서는 노드의 연결 순서, 링크로 연결됨.
            front rear는 각 노드를 가르키게 됨.
    우선순위 큐
        - 우선순위 큐
        - 선입선출이 아닌 우선순위 대로 나가게 됨.
        - 속도 문제를 해결하기 위해 우선순위 큐모듈, 힙을 사용
        - 버퍼 : 데이터를 다른 곳으로 이동하는 동안 잠시 저장하는 장소
포인터
    - 주소를 저장하는 변수
노드
    - 데이터와 링크로 만들어 진것.
헤드
    - 링크필드만 가지고 있음.
